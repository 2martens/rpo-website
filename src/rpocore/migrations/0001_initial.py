# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-30 12:45
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mezzanine.core.fields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pages', '0003_auto_20150527_1555'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('url', models.CharField(max_length=200, verbose_name='URL')),
                ('caption', models.CharField(max_length=100, verbose_name='Caption')),
                ('background_image', models.ImageField(blank=True, help_text="If you don't upload an image the background HTML will be used.", upload_to='', verbose_name='Background image')),
                ('background_html', mezzanine.core.fields.RichTextField(blank=True, help_text="This field will be used if you don't upload an image.", verbose_name='Background HTML')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='FormalStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=30, verbose_name='Organization')),
                ('file', models.FileField(blank=True, help_text='Only PDF files allowed', upload_to='statements', verbose_name='File')),
            ],
        ),
        migrations.CreateModel(
            name='HomepagePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
                ('campaign_positions', mezzanine.core.fields.RichTextField(blank=True, help_text='Please enter the markup for this block.', verbose_name='Campaign positions block')),
                ('supporter_statistics', mezzanine.core.fields.RichTextField(blank=True, help_text='Please enter the markup for this block.', verbose_name='Supporter statistics block')),
                ('get_active', mezzanine.core.fields.RichTextField(blank=True, help_text='Please enter the markup for this block.', verbose_name='Get active block')),
            ],
            options={
                'ordering': ('_order',),
            },
            bases=('pages.page',),
        ),
        migrations.CreateModel(
            name='InformalStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=30, verbose_name='Organization')),
                ('file', models.FileField(help_text='Only PDF files allowed', upload_to='statements', verbose_name='File')),
            ],
        ),
        migrations.CreateModel(
            name='NotableSupporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('name', models.CharField(max_length=30)),
                ('position', models.CharField(max_length=50, verbose_name='Position')),
                ('faculty', models.CharField(choices=[('MIN', 'MIN'), ('WiSo', 'WiSo'), ('BWL', 'BWL'), ('Recht', 'Recht'), ('Medizin', 'Medizin'), ('Erzwiss', 'Erzwiss'), ('GeiWi', 'GeiWi'), ('PB', 'Psychologie und Bewegungswissenschaften')], max_length=30, verbose_name='Faculty')),
                ('image', models.ImageField(blank=True, upload_to='supporters/', verbose_name='Image')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_order', mezzanine.core.fields.OrderField(null=True, verbose_name='Order')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('end_date', models.DateField(default=datetime.date.today)),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
            ],
            options={
                'ordering': ('_order',),
            },
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(blank=True, choices=[('inprogress', 'Am Laufen'), ('success', 'Erfolg'), ('failure', 'Versagen')], max_length=30, verbose_name='Result')),
            ],
        ),
        migrations.CreateModel(
            name='StatementPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
                ('formal_statements', models.ManyToManyField(blank=True, to='rpocore.FormalStatement')),
                ('informal_statements', models.ManyToManyField(blank=True, to='rpocore.InformalStatement')),
            ],
            options={
                'ordering': ('_order',),
            },
            bases=('pages.page',),
        ),
        migrations.CreateModel(
            name='Supporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.TextField(help_text='This statement will appear on the list of supporters together with your name.', null=True, verbose_name='Support statement')),
                ('support_anonymous', models.BooleanField(default=False, help_text='If checked your name will not appear on the list of supporters.', verbose_name='Support anonymously')),
                ('additional_information', models.CharField(blank=True, help_text='Here you can specify additional information about your activities, organizations, etc. It appears next to your name in the list of supporters.', max_length=50, verbose_name='Additional information')),
                ('university', models.CharField(choices=[('UHH', 'Universit채t Hamburg'), ('TUHH', 'Technische Universit채t Hamburg'), ('HAW', 'Hochschule f체r Angewandte Wissenschaften Hamburg'), ('Other', 'Andere Universit채t oder Hochschule')], max_length=30, null=True, verbose_name='University')),
            ],
        ),
        migrations.CreateModel(
            name='SupporterPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
            ],
            options={
                'ordering': ('_order',),
            },
            bases=('pages.page',),
        ),
        migrations.CreateModel(
            name='SupportGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('total_amount', models.IntegerField(verbose_name='Total amount')),
                ('stretch_goals', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z', 32), code='invalid', message='Enter only digits separated by commas.')], verbose_name='Stretch goals')),
            ],
        ),
        migrations.AddField(
            model_name='supporter',
            name='support_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='rpocore.SupportGroup'),
        ),
        migrations.AddField(
            model_name='supporter',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='phase',
            name='process',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rpocore.Process'),
        ),
        migrations.AddField(
            model_name='notablesupporter',
            name='supporter_page',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notable_supporters', to='rpocore.SupporterPage'),
        ),
        migrations.AddField(
            model_name='homepagepage',
            name='process',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='rpocore.Process'),
        ),
        migrations.AddField(
            model_name='carouselitem',
            name='homepage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_items', to='rpocore.HomepagePage'),
        ),
    ]
